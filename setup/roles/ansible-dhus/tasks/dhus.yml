---
# DOWNLOADING
- name: ansible-dhus | dhus | Create a new instance/service directory
  file:
    path: "{{ install_path }}"
    owner: "{{ dhus_user.name }}" 
    group: "{{ dhus_group.name }}"
    state: directory
  tags:
    - dhus

- name: ansible-dhus | dhus | Get DHuS software checksum
  uri:
    url: "{{ dhus_download_hash }}"
    return_content: true
  register: url_sha1
  tags:
    - dhus

- name: ansible-dhus | dhus | Download DHuS software
  get_url:
    url: "{{ dhus_download }}"
    dest: "{{ install_path }}/dhus-{{ dhus_version }}.shar"
    checksum: "sha1:{{ url_sha1.content }}"
    owner: "{{ dhus_user.name }}"
    group: "{{ dhus_group.name }}"
    mode: "0700"
  tags:
    - dhus

# PREPARE INSTALL
- name: ansible-dhus | dhus | Remove line which interferes with removing the shell script from the downloaded file
  lineinfile:
    path: "{{ install_path }}/dhus-{{ dhus_version }}.shar"
    line: "SKIP=`awk '/^__ARCHIVE_FOLLOWS__/ { print NR + 1; exit 0; }' $0`"
    state: absent
  tags:
    - dhus

- name: ansible-dhus | dhus | Remove shell script in downloaded dhus software file
  replace:
    path: "{{ install_path }}/dhus-{{ dhus_version }}.shar"
    regexp: "[^$]"
    after: "#!/bin/bash"
    before: "__ARCHIVE_FOLLOWS__\n"
  tags:
    - dhus

- name: ansible-dhus | dhus | Remove first line still containing markers
  lineinfile:
    path: "{{ install_path }}/dhus-{{ dhus_version }}.shar"
    regexp: "#!/bin/bash.*__ARCHIVE_FOLLOWS__"
    state: absent
  tags:
    - dhus

# INSTALL
- name: ansible-dhus | dhus | Install dhus software
  command:
    cmd: "tar -xzf dhus-{{ dhus_version }}.shar -C {{ install_path }}"
    chdir: "{{ install_path }}"
  become: yes
  become_method: su
  become_user: "{{ dhus_user.name }}"
  tags:
    - dhus

- name: ansible-dhus | dhus | Create a symlink for the new DHuS software
  file:
    owner: "{{ dhus_user.name }}"
    group: "{{ dhus_group.name }}"
    state: link
    src: "{{ install_path }}"
    dest: "{{ dhus_path }}"
  tags:
    - dhus

# CONFIGURE
- name: ansible-dhus | dhus | Set variables according to chosen product
  set_fact:
    solr_path: "{{ item.solr_path }}"
    synchronizer_block: ""
    datastore_block: ""
  loop: "{{ lookup('list', products) }}"
  when: product == item.name
  tags:
    - dhus

- name: ansible-dhus | dhus | Create solr folder
  file:
    dest: "{{ solr_path }}"
    owner: "{{ dhus_user.name }}"
    group: "{{ dhus_group.name }}"
    state: directory
  tags:
    - dhus

- name: ansible-dhus | dhus | Configure DHuS software
  template:
    src: dhus.xml.j2
    dest: "{{ install_path }}/etc/dhus.xml"
    owner: "{{ dhus_user.name }}"
    group: "{{ dhus_group.name }}"
    mode: 0644
    backup: yes
  tags:
    - dhus

- name: ansible-dhus | dhus | Prepare synchronizer block
  set_fact:
    synchronizer_block: |
        {{ synchronizer_block }}<sync:synchronizer xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="sync:productSynchronizer" retriesForSkippedProducts="3" timeoutSkippedProducts="60000">
          <sync:id>{{ item.1.id }}</sync:id>
          <sync:label>{{ item.1.label }}</sync:label>
          <sync:serviceUrl>{{ item.1.url }}</sync:serviceUrl>
          <sync:serviceLogin>{{ item.1.login }}</sync:serviceLogin>
          <sync:servicePassword>{{ item.1.password }}</sync:servicePassword>
          <sync:schedule>0 0/2 * * * ?</sync:schedule>
          <sync:active>{{ item.1.active }}</sync:active>
          <sync:created>{{ ansible_date_time.iso8601_micro }}</sync:created>
          <sync:modified>{{ ansible_date_time.iso8601_micro }}</sync:modified>
          <sync:pageSize>{{ item.1.page_size }}</sync:pageSize>
          <sync:remoteIncoming>{{ item.1.remoteIncoming }}</sync:remoteIncoming>
          <sync:copyProduct>{{ item.1.copyProduct }}</sync:copyProduct>
          <sync:filterParam>{{ item.1.filter }}</sync:filterParam>
          <sync:lastCreated>{{ ansible_date_time.iso8601_micro }}</sync:lastCreated>
          <sync:skipOnError>{{ item.1.skipOnError }}</sync:skipOnError>
          <sync:syncOfflineProducts>{{ item.1.syncOfflineProducts }}</sync:syncOfflineProducts>
        </sync:synchronizer>
  loop: "{{ query('subelements', products, 'synchronizer', wantlist=True) }}"
  when: product == item.0.name
  tags:
    - dhus

- name: ansible-dhus | dhus | Write synchronizer block to dhus.xml file
  replace:
    path: "{{ install_path }}/etc/dhus.xml"
    regexp: "###PLACEHOLDER_SYNCHRONIZER###"
    replace: "{{ synchronizer_block }}"
  tags:
    - dhus

- name: ansible-dhus | dhus | Prepare datastore block
  set_fact:
    datastore_block: |
        {{ datastore_block }}<ds:dataStore xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ds:hfsDataStoreConf" name="{{ item.1.storage_name }}" restriction="{{ item.1.restriction }}" priority="0" {% if item.1.maximumSize|length > 0 %}maximumSize="{{ item.1.maximumSize }}"{% endif %} {% if item.1.autoEviction|length > 0 %}autoEviction="{{ item.1.autoEviction }}"{% endif %}>
            <ds:path>{{ item.1.storage_path }}</ds:path>
            <ds:maxFileNo>10</ds:maxFileNo>
            <ds:maxItems>1024</ds:maxItems>
        </ds:dataStore>
  loop: "{{ query('subelements', products, 'datastore', wantlist=True) }}"
  when: product == item.0.name

- name: ansible-dhus | dhus | Write datastore block to dhus.xml file
  replace:
    path: "{{ install_path }}/etc/dhus.xml"
    regexp: "###PLACEHOLDER_DATASTORE###"
    replace: "{{ datastore_block }}"
  tags:
    - dhus

- name: ansible-dhus | dhus | Create log configuration file
  template:
    src: log4j2.xml.j2
    dest: "{{ install_path }}/etc/log4j2.xml"
    owner: "{{ dhus_user.name }}"
    group: "{{ dhus_group.name }}"
    mode: '0644'
  loop: "{{ lookup('list', products) }}"
  when: product == item.name
  tags:
    - dhus

- name: ansible-dhus | dhus | Create log path
  file:
    dest: "{{ item.log_path }}"
    owner: "{{ dhus_user.name }}"
    group: "{{ dhus_group.name }}"
    state: directory
  loop: "{{ lookup('list', products) }}"
  when: product == item.name
  tags:
    - dhus

- name: ansible-dhus | dhus | Create datastore paths
  file:
    dest: "{{ item.1.storage_path }}"
    owner: "{{ dhus_user.name }}"
    group: "{{ dhus_group.name }}"
    state: directory
  loop: "{{ query('subelements', products, 'datastore', wantlist=True) }}"
  when: product == item.0.name
  tags:
    - dhus

- name: ansible-dhus | dhus | Configure start.sh script to use correct amount of RAM
  replace:
    path: "{{ install_path }}/start.sh"
    regexp: "-Xms12g -Xmx12g"
    replace: "-Xms{{ (ansible_memory_mb.real.total / 2) | int }}m -Xmx{{ (ansible_memory_mb.real.total - 1024) | int }}m"
  tags:
    - dhus

- name: ansible-dhus | dhus | Fix permissions on all DHuS files
  file:
    dest: "{{ install_path }}"
    owner: "{{ dhus_user.name }}" 
    group: "{{ dhus_group.name }}"
    recurse: yes
  tags:
    - dhus
  
- name: ansible-dhus | dhus | Create a service for DHuS
  template:
    src: dhus.service.j2
    dest: "/etc/systemd/system/{{ dhus_name }}.service"
    owner: "{{ dhus_user.name }}"
    group: "{{ dhus_group.name }}"
    mode: '0644'
  tags:
    - dhus
